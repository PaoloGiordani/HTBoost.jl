"""

Short description:

- SMARTboost with gamma distribution on simulated data, generated by a gamma distribution.
- The shape parameter k is estimated internally.
- If modality = :fast, loss=:gamma clearly outperforms loss=:L2 in terms of out-of-sample RMSE.
  However, with modality = :compromise or :accurate, :L2 (which now includes a log-link among the
  hyperparameters to be cross-validated) performs almost as well.     

!!! ADD LIGHTGBM OR SMARTBOOST !!!! 

paolo.giordani@bi.no
"""

number_workers  = 8  # desired number of workers

using Distributed
nprocs()<number_workers ? addprocs( number_workers - nprocs()  ) : addprocs(0)
#@everywhere using SMARTboostPrivate

using Random,Plots,Distributions 

# USER'S OPTIONS 

Random.seed!(123)

# Some options for SMARTboost
loss      = :gamma        # try :gamma and :L2  
modality  = :compromise         # ::accurate, :compromise (default), :fast, :fastest 

priortype = :hybrid       # :hybrid (default) or :smooth to force smoothness 
nfold     = 1             # number of cv folds. 1 faster (single validation sets), default 5 is slower, but more accurate.
nofullsample = true       # if nfold=1 and nofullsample=true, the model is not re-fitted on the full sample after validation of the number of trees

randomizecv = false       # false (default) to use block-cv. 
verbose     = :Off
warnings    = :On

# options to generate data. y = sum of four additive nonlinear functions + Gaussian noise.
true_k      = 10
n,p,n_test  = 10_000,4,100_000

f_1(x,b)    = b*x  
f_2(x,b)    = -b*(x.<0.5) + b*(x.>=0.5)   
f_3(x,b)    = b*x
f_4(x,b)    = -b*(x.<0.5) + b*(x.>=0.5)

b1,b2,b3,b4 = 0.2,0.2,0.2,0.2

# generate data
x,x_test = randn(n,p), randn(n_test,p)

c        = -2  
f        = c .+ f_1(x[:,1],b1) + f_2(x[:,2],b2) + f_3(x[:,3],b3) + f_4(x[:,4],b4)
f_test   = c .+ f_1(x_test[:,1],b1) + f_2(x_test[:,2],b2) + f_3(x_test[:,3],b3) + f_4(x_test[:,4],b4)

μ        = exp.(f)        # conditional mean 
μ_test   = exp.(f_test)   # conditional mean 

# k can depend on features for a /= 1
a        = -0   
logk     = log(true_k)
logk     = logk .+ a*(b1*x[:,1] + b2*x[:,2] + b4*x[:,4])
k        = exp.(logk)
logk_test = log(true_k) .+ a*(b1*x_test[:,1] + b2*x_test[:,2] + b4*x_test[:,4] )
k_test    = exp.(logk_test) 
# end k dependent on features
scale    = μ./k
scale_test = μ_test./k_test
y       = zeros(n)

for i in eachindex(y)
    y[i]  = rand(Gamma.(k[i],scale[i]))
end 

histogram(y)
@show [mean(y), std(y), std(μ), maximum(y)]

# set up SMARTparam and SMARTdata, then fit and predit
nsimul,simul = 1,1
RMSE = zeros(nsimul,4)

# coefficient estimated internally. 
param  = SMARTparam(loss=loss,priortype=priortype,randomizecv=randomizecv,nfold=nfold,
                   verbose=verbose,warnings=warnings,modality=modality,nofullsample=nofullsample)
data   = SMARTdata(y,x,param)

@time output = SMARTfit(data,param)
yf     = SMARTpredict(x_test,output,predict=:Ey)

RMSE[simul,1] = sqrt(sum((yf - μ_test).^2)/n_test)

println(" \n loss = $loss, modality = $(param.modality), nfold = $nfold ")
println(" depth = $(output.bestvalue), number of trees = $(output.ntrees) ")
println(" out-of-sample RMSE from truth, μ     ", sqrt(sum((yf - μ_test).^2)/n_test) )

println("\n true dispersion = $true_k, estimated = $(exp(output.bestparam.coeff_updated[1][1])) ")
println("\n For more information about coefficients, use SMARTcoeff(output) ")
SMARTcoeff(output)

# Repeat for L2 loss. If modality in [:compromise,:accurate], this also includes a log-link.
param_L2 = deepcopy(param) 
param_L2.loss = :L2 
@time output_L2 = SMARTfit(data,param_L2)
yf    = SMARTpredict(x_test,output_L2,predict=:Ey)  

RMSE[simul,3] = sqrt(sum((yf - μ_test).^2)/n_test)

println(" \n loss = $(param_L2.loss), modality = $(param.modality), nfold = $nfold ")
println(" depth = $(output_L2.bestvalue), number of trees = $(output_L2.ntrees) ")
println(" out-of-sample RMSE from truth, μ      ", sqrt(sum((yf - μ_test).^2)/n_test) )

q,pdp  = SMARTpartialplot(data,output,[1,2,3,4],predict=:Egamma)

# plot partial dependence in terms of the natural parameter 
pl   = Vector(undef,4)
f,b  = [f_1,f_2,f_3,f_4],[b1,b2,b3,b4]

for i in 1:length(pl)
        pl[i]   = plot( [q[:,i]],[pdp[:,i] f[i](q[:,i],b[i]) - f[i](q[:,i]*0,b[i])],
           label = ["smart" "dgp"],
           legend = :bottomright,
           linecolor = [:blue :red],
           linestyle = [:solid :dot],

           linewidth = [5 5],
           titlefont = font(15),
           legendfont = font(12),
           xlabel = "x",
           ylabel = "f(x)",
           )
end

display(plot(pl[1], pl[2], pl[3], pl[4], layout=(2,2), size=(1300,800)))  # display() will show it in Plots window.
